# -*- coding:utf-8 -*-

def solve():
    A, B = list(map(int, input().split()))

    """解説
    考え方としては、累積和みたいなかんじ
    「4~8までのxor」は、「0~8までのxor」 から 「0~3までのxor」 を引くかんじ

    A xor B = C のとき、
    A xor C = B であることに着目する

    各桁の1の数を数えれば求まる

    ・1~8のxor
    0000 | 0
    0001 | 1
    0010 | 2
    0011 | 3
    0100 | 4
    0101 | 5
    0110 | 6
    0111 | 7
    1000 | 8
    ----
    1001

    ・各桁の01の周期に着目する
    ・0桁目の周期は2
    ・1桁目の周期は4
    ・2桁目の周期は8
    ・3桁目の周期は16
    """

    def calc(a):
        # 10**3 <= 2**10 は
        # 1000  <= 1024 なので
        # 10**12 <= 2**40 (2進数で40桁くらい)
        if a <= 0: return 0

        ans = 0
        for i in range(0, 50):
            # i桁目の周期Tを調べる
            # 0桁目 -> 周期T=2
            # 1桁目 -> 周期T=4
            # 2桁目 -> 周期T=8
            T = 1 << (i+1)

            # 各桁の1の個数は
            # cnt = (ループした回数) * (1が出てくる回数)
            cnt = ((a+1)//T) * (T/2)
            # cnt += あまった1の数を足す
            cnt += max(0, ((a+1)%T) - (T/2))

            # その桁の1の数が奇数だったら足し算する
            if cnt%2 == 1:
                ans += 1 << i
        
        return ans

    ans = calc(B) ^ calc(A-1)
    print(ans)

if __name__ == "__main__":
    solve()
