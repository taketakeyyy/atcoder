# -*- coding:utf-8 -*-

def solve():
    L = input()
    MOD = 10**9+7

    """考え方
    a+b = a^b とは、aとbを2進数にしたとき、1が互いに重なるbit桁がないこと（0は重なってもよい）。

    L < 2**100001
    とはつまり、
    Lを2進数で表したとき、最大のbit桁が100000

    bit桁 | 100000 99999 99998 ... 3 2 1 0
    a     |      1     0     1 ... 1 0 1 0
    b     |      0     1     0 ... 0 1 0 1

    のような、aとbのパターンの総数を求めればよい
    """

    bit_keta = len(L) -1
    L = int(L)









if __name__ == "__main__":
    solve()
